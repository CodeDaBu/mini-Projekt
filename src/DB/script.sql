create table if not exists drzave
(
    id   integer generated by default as identity
        primary key,
    ime  varchar,
    koda varchar
);

alter table drzave
    owner to postgres;

create table if not exists kraj
(
    id        integer generated by default as identity
        primary key,
    ime       varchar,
    postna_st varchar,
    drzava_id integer
        references drzave
        constraint kraj_drzava_fkey
            references drzave
);

alter table kraj
    owner to postgres;

create table if not exists radio
(
    id            integer generated by default as identity
        primary key,
    ime           varchar,
    frekvenca     double precision,
    channel       varchar,
    valid_until   date,
    phone         varchar,
    email         varchar,
    kraj_id       integer
        references kraj,
    comment_count integer   default 0,
    last_modified timestamp default CURRENT_TIMESTAMP
);

alter table radio
    owner to postgres;

create table if not exists users
(
    id         integer generated by default as identity
        primary key,
    username   varchar,
    password   varchar,
    email      varchar,
    phone      varchar,
    kraj_id    integer
        references kraj,
    created_at timestamp,
    updated_at timestamp
);

alter table users
    owner to postgres;

create table if not exists comments
(
    id           integer generated by default as identity
        primary key,
    comment_text text,
    frequency_id integer
        references radio,
    user_id      integer
        references users,
    created_at   timestamp
);

alter table comments
    owner to postgres;

create or replace function check_user_validity(p_username text, p_password text) returns boolean
    language plpgsql
as
$$
DECLARE
    user_exists BOOLEAN;
BEGIN
    SELECT EXISTS(SELECT 1 FROM users WHERE username = p_username AND password = p_password) INTO user_exists;
    RETURN user_exists;
END;
$$;

alter function check_user_validity(text, text) owner to postgres;

create or replace function register_new_user(p_username text, p_password text) returns void
    language plpgsql
as
$$
BEGIN
    INSERT INTO users (username, password) VALUES (p_username, p_password);
END;
$$;

alter function register_new_user(text, text) owner to postgres;

create or replace function get_user_id(p_username text) returns integer
    language plpgsql
as
$$
DECLARE
    user_id INT;
BEGIN
    SELECT id INTO user_id FROM users WHERE username = p_username;
    RETURN user_id;
END;
$$;

alter function get_user_id(text) owner to postgres;

create or replace function update_comment_count() returns trigger
    language plpgsql
as
$$
BEGIN
  UPDATE radio
  SET comment_count = (
    SELECT COUNT(*) FROM comments WHERE frequency_id = NEW.frequency_id
  )
  WHERE id = NEW.frequency_id;
  RETURN NEW;
END;
$$;

alter function update_comment_count() owner to postgres;

create trigger comment_count_trigger
    after insert
    on comments
    for each row
execute procedure update_comment_count();

create trigger trg_update_comment_count
    after insert
    on comments
    for each row
execute procedure update_comment_count();

create or replace function prijava_uporabnika(p_username text, p_password text) returns integer
    language plpgsql
as
$$
DECLARE
    user_id INTEGER;
BEGIN
    SELECT id INTO user_id
    FROM users
    WHERE username = p_username AND password = p_password;

    IF user_id IS NULL THEN
        RETURN -1;
    ELSE
        RETURN user_id;
    END IF;
END;
$$;

alter function prijava_uporabnika(text, text) owner to postgres;

create or replace function registracija_uporabnika(p_username text, p_password text) returns boolean
    language plpgsql
as
$$
BEGIN
    IF EXISTS (SELECT 1 FROM users WHERE username = p_username) THEN
        RETURN FALSE;  -- uporabniško ime že obstaja
    END IF;

    INSERT INTO users (username, password)
    VALUES (p_username, p_password);

    RETURN TRUE;
END;
$$;

alter function registracija_uporabnika(text, text) owner to postgres;

create or replace function pridobi_radio_id(po_ime text) returns integer
    language plpgsql
as
$$
DECLARE
    rid INT;
BEGIN
    SELECT id INTO rid FROM radio WHERE ime = po_ime;
    RETURN rid;
END;
$$;

alter function pridobi_radio_id(text) owner to postgres;

create or replace function pridobi_podrobnosti_radia(po_ime text)
    returns TABLE(id integer, ime text, frekvenca double precision, channel text, valid_until date, phone text, email text)
    language plpgsql
as
$$
BEGIN
    RETURN QUERY
    SELECT id, ime, frekvenca, channel, valid_until, phone, email
    FROM radio
    WHERE ime = po_ime;
END;
$$;

alter function pridobi_podrobnosti_radia(text) owner to postgres;

create or replace function dodaj_komentar(p_comment_text text, p_frequency_id integer, p_user_id integer) returns void
    language plpgsql
as
$$
BEGIN
    INSERT INTO comments (comment_text, frequency_id, user_id, created_at)
    VALUES (p_comment_text, p_frequency_id, p_user_id, CURRENT_TIMESTAMP);
END;
$$;

alter function dodaj_komentar(text, integer, integer) owner to postgres;

create or replace function count_comments(radio_id integer) returns integer
    language plpgsql
as
$$
BEGIN
    RETURN (SELECT COUNT(*) FROM comments WHERE frequency_id = radio_id);
END;
$$;

alter function count_comments(integer) owner to postgres;

create or replace function update_last_modified() returns trigger
    language plpgsql
as
$$
BEGIN
    NEW.last_modified = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$;

alter function update_last_modified() owner to postgres;

create trigger trigger_update_last_modified
    before update
    on radio
    for each row
execute procedure update_last_modified();

create or replace function pridobi_vse_radio_postaje()
    returns TABLE(id integer, ime character varying, frekvenca double precision)
    language plpgsql
as
$$
BEGIN
    RETURN QUERY
    SELECT r.id, r.ime, r.frekvenca
    FROM radio r;
END;
$$;

alter function pridobi_vse_radio_postaje() owner to postgres;

create or replace function update_radio_last_modified() returns trigger
    language plpgsql
as
$$
BEGIN
    UPDATE radio
    SET last_modified = CURRENT_TIMESTAMP
    WHERE id = NEW.frequency_id;
    RETURN NEW;
END;
$$;

alter function update_radio_last_modified() owner to postgres;

create trigger update_radio_last_modified
    after insert
    on comments
    for each row
execute procedure update_radio_last_modified();

